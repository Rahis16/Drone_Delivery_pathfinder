{
    "sourceFile": "static/js/script.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1753552174909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753552186634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n         }\r\n     });\r\n }\r\n \r\n-\r\n+// for theoritical explaination \r\n function updateGridStructureView() {\r\n     const formatted = grid.map(row => \r\n         '[' + row.map(cell => `'${cell}'`).join(', ') + ']'\r\n     ).join(',\\n');\r\n"
                },
                {
                    "date": 1753552255093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,10 @@\n         cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n     } else if (nextState === 'G') {\r\n         cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n     }\r\n+\r\n+    updateGridStructureView();\r\n }\r\n \r\n // resetinng others on multiple clicks turn by turn \r\n function resetOther(type) {\r\n"
                },
                {
                    "date": 1753552330972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,10 +57,8 @@\n         cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n     } else if (nextState === 'G') {\r\n         cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n     }\r\n-\r\n-    updateGridStructureView();\r\n }\r\n \r\n // resetinng others on multiple clicks turn by turn \r\n function resetOther(type) {\r\n"
                },
                {
                    "date": 1753552376072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,10 @@\n         cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n     } else if (nextState === 'G') {\r\n         cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n     }\r\n+\r\n+    \r\n }\r\n \r\n // resetinng others on multiple clicks turn by turn \r\n function resetOther(type) {\r\n"
                },
                {
                    "date": 1753552382238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,10 +57,9 @@\n         cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n     } else if (nextState === 'G') {\r\n         cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n     }\r\n-\r\n-    \r\n+    updateGridStructureView();\r\n }\r\n \r\n // resetinng others on multiple clicks turn by turn \r\n function resetOther(type) {\r\n"
                },
                {
                    "date": 1753552402734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n     } else if (nextState === 'G') {\r\n         cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n     }\r\n-    updateGridStructureView();\r\n+    \r\n }\r\n \r\n // resetinng others on multiple clicks turn by turn \r\n function resetOther(type) {\r\n"
                },
                {
                    "date": 1753552570697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,10 @@\n             row.push('.');\r\n         }\r\n         grid.push(row);\r\n     }\r\n+\r\n+     updateGridStructureView();\r\n }\r\n \r\n createGrid();\r\n \r\n"
                },
                {
                    "date": 1753553511199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         }\r\n         grid.push(row);\r\n     }\r\n \r\n-     updateGridStructureView();\r\n+    updateGridStructureView();\r\n }\r\n \r\n createGrid();\r\n \r\n"
                },
                {
                    "date": 1753553602290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n     } else if (nextState === 'G') {\r\n         cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n     }\r\n     \r\n+    updateGridStructureView();\r\n }\r\n \r\n // resetinng others on multiple clicks turn by turn \r\n function resetOther(type) {\r\n"
                },
                {
                    "date": 1753553624160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,10 @@\n             cell.className = 'cell open';\r\n             cell.textContent = '';\r\n         }\r\n     }\r\n+\r\n+    updateGridStructureView();\r\n }\r\n \r\n function submitGrid() {\r\n     const algorithm = document.getElementById('algorithm').value;\r\n"
                },
                {
                    "date": 1753553629847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n             cell.className = 'cell open';\r\n             cell.textContent = '';\r\n         }\r\n     }\r\n-\r\n+// ✅ Update after clearing old S or G\r\n     updateGridStructureView();\r\n }\r\n \r\n function submitGrid() {\r\n"
                },
                {
                    "date": 1753554117365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,8 +98,11 @@\n         success: function (response) {\r\n             console.log(\"Path:\", response.path);\r\n             resetGridColors();\r\n             highlightPath(response.path); // animate on grid\r\n+            if (response.tree) {\r\n+        renderTree(response.tree);\r\n+    }\r\n         },\r\n         error: function () {\r\n             alert(\"Error sending data to backend.\");\r\n         }\r\n"
                },
                {
                    "date": 1753554140950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n         cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n     } else if (nextState === 'G') {\r\n         cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n     }\r\n-    \r\n+\r\n     updateGridStructureView();\r\n }\r\n \r\n // resetinng others on multiple clicks turn by turn \r\n@@ -76,9 +76,9 @@\n             cell.className = 'cell open';\r\n             cell.textContent = '';\r\n         }\r\n     }\r\n-// ✅ Update after clearing old S or G\r\n+    // ✅ Update after clearing old S or G\r\n     updateGridStructureView();\r\n }\r\n \r\n function submitGrid() {\r\n@@ -99,10 +99,10 @@\n             console.log(\"Path:\", response.path);\r\n             resetGridColors();\r\n             highlightPath(response.path); // animate on grid\r\n             if (response.tree) {\r\n-        renderTree(response.tree);\r\n-    }\r\n+                renderTree(response.tree);\r\n+            }\r\n         },\r\n         error: function () {\r\n             alert(\"Error sending data to backend.\");\r\n         }\r\n@@ -224,9 +224,9 @@\n }\r\n \r\n // for theoritical explaination \r\n function updateGridStructureView() {\r\n-    const formatted = grid.map(row => \r\n+    const formatted = grid.map(row =>\r\n         '[' + row.map(cell => `'${cell}'`).join(', ') + ']'\r\n     ).join(',\\n');\r\n \r\n     const finalString = '[\\n' + formatted + '\\n]';\r\n@@ -247,9 +247,30 @@\n     });\r\n }\r\n \r\n \r\n+function renderTree(treeData) {\r\n+    const treeConfig = {\r\n+        chart: {\r\n+            container: \"#tree-container\",\r\n+            levelSeparation: 35,\r\n+            siblingSeparation: 25,\r\n+            node: {\r\n+                HTMLclass: \"nodeExample1\"\r\n+            },\r\n+            connectors: {\r\n+                type: \"step\"\r\n+            }\r\n+        },\r\n+        nodeStructure: treeData\r\n+    };\r\n \r\n+    // Clear old tree (important)\r\n+    document.getElementById(\"tree-container\").innerHTML = \"\";\r\n+    new Treant(treeConfig);\r\n+}\r\n+\r\n+\r\n // CSRF Token helper (Django needs this)\r\n function getCookie(name) {\r\n     let cookieValue = null;\r\n     if (document.cookie && document.cookie !== '') {\r\n"
                },
                {
                    "date": 1753554987000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,30 +247,23 @@\n     });\r\n }\r\n \r\n \r\n-function renderTree(treeData) {\r\n-    const treeConfig = {\r\n+function renderSearchTree(treeData) {\r\n+    new Treant({\r\n         chart: {\r\n             container: \"#tree-container\",\r\n-            levelSeparation: 35,\r\n-            siblingSeparation: 25,\r\n+            connectors: {\r\n+                type: \"step\"\r\n+            },\r\n             node: {\r\n                 HTMLclass: \"nodeExample1\"\r\n-            },\r\n-            connectors: {\r\n-                type: \"step\"\r\n             }\r\n         },\r\n         nodeStructure: treeData\r\n-    };\r\n-\r\n-    // Clear old tree (important)\r\n-    document.getElementById(\"tree-container\").innerHTML = \"\";\r\n-    new Treant(treeConfig);\r\n+    });\r\n }\r\n \r\n-\r\n // CSRF Token helper (Django needs this)\r\n function getCookie(name) {\r\n     let cookieValue = null;\r\n     if (document.cookie && document.cookie !== '') {\r\n"
                },
                {
                    "date": 1753555014485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n             console.log(\"Path:\", response.path);\r\n             resetGridColors();\r\n             highlightPath(response.path); // animate on grid\r\n             if (response.tree) {\r\n-                renderTree(response.tree);\r\n+                renderSearchTree(response.tree); // 🔥 show the tree\r\n             }\r\n         },\r\n         error: function () {\r\n             alert(\"Error sending data to backend.\");\r\n"
                },
                {
                    "date": 1753556342823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n         cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n     } else if (nextState === 'G') {\r\n         cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n     }\r\n+    else if\r\n \r\n     updateGridStructureView();\r\n }\r\n \r\n"
                },
                {
                    "date": 1753556352623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,13 @@\n         cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n     } else if (nextState === 'G') {\r\n         cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n     }\r\n-    else if\r\n+    else if (nextState === 'X') {\r\n+        cell.innerHTML = \"<img src='/static/images/house' width='110'>\";\r\n+    }\r\n \r\n+\r\n     updateGridStructureView();\r\n }\r\n \r\n // resetinng others on multiple clicks turn by turn \r\n"
                },
                {
                    "date": 1753558432941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     } else if (nextState === 'G') {\r\n         cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n     }\r\n     else if (nextState === 'X') {\r\n-        cell.innerHTML = \"<img src='/static/images/house' width='110'>\";\r\n+        cell.innerHTML = \"<img src='/static/images/house.png' width='110'>\";\r\n     }\r\n \r\n \r\n     updateGridStructureView();\r\n@@ -185,8 +185,14 @@\n     const interval = setInterval(() => {\r\n         if (step >= path.length) {\r\n             clearInterval(interval);\r\n             alert(\"Delivery Complete ✅\");\r\n+            // 🔥 Launch confetti\r\n+            confetti({\r\n+                particleCount: 150,\r\n+                spread: 70,\r\n+                origin: { y: 0.6 }\r\n+            });\r\n             setTimeout(() => {\r\n                 clearAfterDelivery();\r\n             }, 20000);\r\n             return;\r\n"
                },
                {
                    "date": 1753558540851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,291 @@\n+let currentMode = '.'; // default to open\r\n+let grid = [];\r\n+\r\n+function createGrid() {\r\n+    const rows = parseInt(document.getElementById('rows').value);\r\n+    const cols = parseInt(document.getElementById('cols').value);\r\n+    const container = document.getElementById('grid-container');\r\n+\r\n+    container.innerHTML = '';\r\n+    container.style.gridTemplateColumns = `repeat(${cols}, 110px)`;\r\n+    grid = [];\r\n+\r\n+    for (let r = 0; r < rows; r++) {\r\n+        const row = [];\r\n+        for (let c = 0; c < cols; c++) {\r\n+            const div = document.createElement('div');\r\n+            div.classList.add('cell', 'open');\r\n+            div.dataset.row = r;\r\n+            div.dataset.col = c;\r\n+            div.style.height = '110px';\r\n+            div.style.width = '110px';\r\n+\r\n+            div.onclick = () => {\r\n+                toggleCell(div);\r\n+            };\r\n+\r\n+            container.appendChild(div);\r\n+            row.push('.');\r\n+        }\r\n+        grid.push(row);\r\n+    }\r\n+\r\n+    updateGridStructureView();\r\n+}\r\n+\r\n+createGrid();\r\n+\r\n+function toggleCell(cell) {\r\n+    const row = cell.dataset.row;\r\n+    const col = cell.dataset.col;\r\n+\r\n+    const states = ['.', 'X', 'S', 'G'];\r\n+    const classes = ['open', 'block', 'start', 'goal'];\r\n+\r\n+    let currentState = grid[row][col];\r\n+    let nextIndex = (states.indexOf(currentState) + 1) % states.length;\r\n+    let nextState = states[nextIndex];\r\n+\r\n+    // Reset all other S or G if needed\r\n+    if (nextState === 'S') resetOther('S');\r\n+    if (nextState === 'G') resetOther('G');\r\n+\r\n+    grid[row][col] = nextState;\r\n+    cell.className = `cell ${classes[nextIndex]}`;\r\n+    cell.textContent = nextState === '.' ? '' : nextState;\r\n+\r\n+    // Add images\r\n+    if (nextState === 'S') {\r\n+        cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n+    } else if (nextState === 'G') {\r\n+        cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n+    }\r\n+    else if (nextState === 'X') {\r\n+        cell.innerHTML = \"<img src='/static/images/house.png' width='110'>\";\r\n+    }\r\n+\r\n+\r\n+    updateGridStructureView();\r\n+}\r\n+\r\n+// resetinng others on multiple clicks turn by turn \r\n+function resetOther(type) {\r\n+    const container = document.getElementById('grid-container').children;\r\n+    for (let i = 0; i < container.length; i++) {\r\n+        const cell = container[i];\r\n+        const r = cell.dataset.row;\r\n+        const c = cell.dataset.col;\r\n+        if (grid[r][c] === type) {\r\n+            grid[r][c] = '.';\r\n+            cell.className = 'cell open';\r\n+            cell.textContent = '';\r\n+        }\r\n+    }\r\n+    // ✅ Update after clearing old S or G\r\n+    updateGridStructureView();\r\n+}\r\n+\r\n+function submitGrid() {\r\n+    const algorithm = document.getElementById('algorithm').value;\r\n+\r\n+    // Send data to backend via AJAX\r\n+    $.ajax({\r\n+        url: '/solve/',  // This URL should match your Django path\r\n+        method: 'POST',\r\n+        headers: {\r\n+            'X-CSRFToken': getCookie('csrftoken')  // Include CSRF token\r\n+        },\r\n+        data: {\r\n+            algorithm: algorithm,\r\n+            grid: JSON.stringify(grid)\r\n+        },\r\n+        success: function (response) {\r\n+            console.log(\"Path:\", response.path);\r\n+            resetGridColors();\r\n+            highlightPath(response.path); // animate on grid\r\n+            if (response.tree) {\r\n+                renderSearchTree(response.tree); // 🔥 show the tree\r\n+            }\r\n+        },\r\n+        error: function () {\r\n+            alert(\"Error sending data to backend.\");\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+\r\n+function highlightPath(path) {\r\n+    // 1. Highlight the path first (light blue cells)\r\n+    path.forEach((coord, index) => {\r\n+        const row = coord[0];\r\n+        const col = coord[1];\r\n+        const cell = document.querySelector(`.cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\r\n+\r\n+        if (cell && !cell.classList.contains('start') && !cell.classList.contains('goal')) {\r\n+            setTimeout(() => {\r\n+                cell.style.backgroundColor = '#ceffc2ff'; // light blue\r\n+            }, 200 * index);\r\n+        }\r\n+    });\r\n+\r\n+    // 2. Start animated countdown\r\n+    setTimeout(() => {\r\n+        showCountdown(path);\r\n+    }, path.length * 200 + 500); // wait until highlighting is done\r\n+}\r\n+\r\n+\r\n+function showCountdown(path) {\r\n+    const countdownScreen = document.getElementById('countdown-screen');\r\n+    const countText = document.getElementById('count-text');\r\n+\r\n+    countdownScreen.style.display = 'flex';\r\n+\r\n+    let count = 3;\r\n+\r\n+    const interval = setInterval(() => {\r\n+        if (count > 0) {\r\n+            countText.textContent = count;\r\n+            countText.classList.remove('count-text');\r\n+            void countText.offsetWidth; // restart animation\r\n+            countText.classList.add('count-text');\r\n+            count--;\r\n+        } else if (count === 0) {\r\n+            countText.textContent = 'GO!';\r\n+            countText.classList.remove('count-text');\r\n+            void countText.offsetWidth;\r\n+            countText.classList.add('count-text');\r\n+            count--;\r\n+        } else {\r\n+            clearInterval(interval);\r\n+            countdownScreen.style.display = 'none';\r\n+            moveDrone(path);\r\n+        }\r\n+    }, 1000); // 1 second per count\r\n+}\r\n+\r\n+function moveDrone(path) {\r\n+    const drone = document.getElementById('drone-fly');\r\n+\r\n+    // Start at the first cell\r\n+    const first = path[0];\r\n+    const firstCell = document.querySelector(`.cell[data-row=\"${first[0]}\"][data-col=\"${first[1]}\"]`);\r\n+\r\n+    if (!firstCell) return;\r\n+\r\n+    // Show and position drone\r\n+    const rect = firstCell.getBoundingClientRect();\r\n+    drone.style.display = 'block';\r\n+    drone.style.position = 'absolute';\r\n+    drone.style.left = rect.left + 'px';\r\n+    drone.style.top = rect.top + 'px';\r\n+\r\n+    let step = 1;\r\n+\r\n+    const interval = setInterval(() => {\r\n+        if (step >= path.length) {\r\n+            clearInterval(interval);\r\n+            // alert(\"Delivery Complete ✅\");\r\n+            // 🔥 Launch confetti\r\n+            confetti({\r\n+                particleCount: 150,\r\n+                spread: 70,\r\n+                origin: { y: 0.6 }\r\n+            });\r\n+            setTimeout(() => {\r\n+                clearAfterDelivery();\r\n+            }, 20000);\r\n+            return;\r\n+        }\r\n+\r\n+        const [row, col] = path[step];\r\n+        const cell = document.querySelector(`.cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\r\n+        if (cell) {\r\n+            const rect = cell.getBoundingClientRect();\r\n+            drone.style.left = rect.left + 'px';\r\n+            drone.style.top = rect.top + 'px';\r\n+        }\r\n+\r\n+        step++;\r\n+    }, 1400); // Adjust to match transition speed\r\n+}\r\n+\r\n+// Resets all grid items and set to \".\" white \r\n+function resetGrid() {\r\n+    window.location.reload();\r\n+    console.log(\"Grid has been reset ✅\");\r\n+}\r\n+\r\n+// Cleaning the path after delivery \r\n+function clearAfterDelivery() {\r\n+    const cells = document.querySelectorAll('.cell');\r\n+\r\n+    cells.forEach(cell => {\r\n+        if (\r\n+            !cell.classList.contains('start') &&\r\n+            !cell.classList.contains('goal') &&\r\n+            !cell.classList.contains('block')\r\n+        ) {\r\n+            cell.className = 'cell open';\r\n+            cell.innerHTML = '';\r\n+            cell.style.backgroundColor = 'white';\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// for theoritical explaination \r\n+function updateGridStructureView() {\r\n+    const formatted = grid.map(row =>\r\n+        '[' + row.map(cell => `'${cell}'`).join(', ') + ']'\r\n+    ).join(',\\n');\r\n+\r\n+    const finalString = '[\\n' + formatted + '\\n]';\r\n+    document.getElementById('grid-structure').textContent = finalString;\r\n+}\r\n+\r\n+// for resetting the grid colors \r\n+function resetGridColors() {\r\n+    const cells = document.querySelectorAll('.cell');\r\n+    cells.forEach(cell => {\r\n+        if (\r\n+            !cell.classList.contains('start') &&\r\n+            !cell.classList.contains('goal') &&\r\n+            !cell.classList.contains('block')\r\n+        ) {\r\n+            cell.style.backgroundColor = 'white';\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+\r\n+function renderSearchTree(treeData) {\r\n+    new Treant({\r\n+        chart: {\r\n+            container: \"#tree-container\",\r\n+            connectors: {\r\n+                type: \"step\"\r\n+            },\r\n+            node: {\r\n+                HTMLclass: \"nodeExample1\"\r\n+            }\r\n+        },\r\n+        nodeStructure: treeData\r\n+    });\r\n+}\r\n+\r\n+// CSRF Token helper (Django needs this)\r\n+function getCookie(name) {\r\n+    let cookieValue = null;\r\n+    if (document.cookie && document.cookie !== '') {\r\n+        const cookies = document.cookie.split(';');\r\n+        for (let i = 0; i < cookies.length; i++) {\r\n+            const cookie = cookies[i].trim();\r\n+            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n+                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n+                break;\r\n+            }\r\n+        }\r\n+    }\r\n+    return cookieValue;\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1753558545987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,291 @@\n+let currentMode = '.'; // default to open\r\n+let grid = [];\r\n+\r\n+function createGrid() {\r\n+    const rows = parseInt(document.getElementById('rows').value);\r\n+    const cols = parseInt(document.getElementById('cols').value);\r\n+    const container = document.getElementById('grid-container');\r\n+\r\n+    container.innerHTML = '';\r\n+    container.style.gridTemplateColumns = `repeat(${cols}, 110px)`;\r\n+    grid = [];\r\n+\r\n+    for (let r = 0; r < rows; r++) {\r\n+        const row = [];\r\n+        for (let c = 0; c < cols; c++) {\r\n+            const div = document.createElement('div');\r\n+            div.classList.add('cell', 'open');\r\n+            div.dataset.row = r;\r\n+            div.dataset.col = c;\r\n+            div.style.height = '110px';\r\n+            div.style.width = '110px';\r\n+\r\n+            div.onclick = () => {\r\n+                toggleCell(div);\r\n+            };\r\n+\r\n+            container.appendChild(div);\r\n+            row.push('.');\r\n+        }\r\n+        grid.push(row);\r\n+    }\r\n+\r\n+    updateGridStructureView();\r\n+}\r\n+\r\n+createGrid();\r\n+\r\n+function toggleCell(cell) {\r\n+    const row = cell.dataset.row;\r\n+    const col = cell.dataset.col;\r\n+\r\n+    const states = ['.', 'X', 'S', 'G'];\r\n+    const classes = ['open', 'block', 'start', 'goal'];\r\n+\r\n+    let currentState = grid[row][col];\r\n+    let nextIndex = (states.indexOf(currentState) + 1) % states.length;\r\n+    let nextState = states[nextIndex];\r\n+\r\n+    // Reset all other S or G if needed\r\n+    if (nextState === 'S') resetOther('S');\r\n+    if (nextState === 'G') resetOther('G');\r\n+\r\n+    grid[row][col] = nextState;\r\n+    cell.className = `cell ${classes[nextIndex]}`;\r\n+    cell.textContent = nextState === '.' ? '' : nextState;\r\n+\r\n+    // Add images\r\n+    if (nextState === 'S') {\r\n+        cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n+    } else if (nextState === 'G') {\r\n+        cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n+    }\r\n+    else if (nextState === 'X') {\r\n+        cell.innerHTML = \"<img src='/static/images/house.png' width='110'>\";\r\n+    }\r\n+\r\n+\r\n+    updateGridStructureView();\r\n+}\r\n+\r\n+// resetinng others on multiple clicks turn by turn \r\n+function resetOther(type) {\r\n+    const container = document.getElementById('grid-container').children;\r\n+    for (let i = 0; i < container.length; i++) {\r\n+        const cell = container[i];\r\n+        const r = cell.dataset.row;\r\n+        const c = cell.dataset.col;\r\n+        if (grid[r][c] === type) {\r\n+            grid[r][c] = '.';\r\n+            cell.className = 'cell open';\r\n+            cell.textContent = '';\r\n+        }\r\n+    }\r\n+    // ✅ Update after clearing old S or G\r\n+    updateGridStructureView();\r\n+}\r\n+\r\n+function submitGrid() {\r\n+    const algorithm = document.getElementById('algorithm').value;\r\n+\r\n+    // Send data to backend via AJAX\r\n+    $.ajax({\r\n+        url: '/solve/',  // This URL should match your Django path\r\n+        method: 'POST',\r\n+        headers: {\r\n+            'X-CSRFToken': getCookie('csrftoken')  // Include CSRF token\r\n+        },\r\n+        data: {\r\n+            algorithm: algorithm,\r\n+            grid: JSON.stringify(grid)\r\n+        },\r\n+        success: function (response) {\r\n+            console.log(\"Path:\", response.path);\r\n+            resetGridColors();\r\n+            highlightPath(response.path); // animate on grid\r\n+            if (response.tree) {\r\n+                renderSearchTree(response.tree); // 🔥 show the tree\r\n+            }\r\n+        },\r\n+        error: function () {\r\n+            alert(\"Error sending data to backend.\");\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+\r\n+function highlightPath(path) {\r\n+    // 1. Highlight the path first (light blue cells)\r\n+    path.forEach((coord, index) => {\r\n+        const row = coord[0];\r\n+        const col = coord[1];\r\n+        const cell = document.querySelector(`.cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\r\n+\r\n+        if (cell && !cell.classList.contains('start') && !cell.classList.contains('goal')) {\r\n+            setTimeout(() => {\r\n+                cell.style.backgroundColor = '#ceffc2ff'; // light blue\r\n+            }, 200 * index);\r\n+        }\r\n+    });\r\n+\r\n+    // 2. Start animated countdown\r\n+    setTimeout(() => {\r\n+        showCountdown(path);\r\n+    }, path.length * 200 + 500); // wait until highlighting is done\r\n+}\r\n+\r\n+\r\n+function showCountdown(path) {\r\n+    const countdownScreen = document.getElementById('countdown-screen');\r\n+    const countText = document.getElementById('count-text');\r\n+\r\n+    countdownScreen.style.display = 'flex';\r\n+\r\n+    let count = 3;\r\n+\r\n+    const interval = setInterval(() => {\r\n+        if (count > 0) {\r\n+            countText.textContent = count;\r\n+            countText.classList.remove('count-text');\r\n+            void countText.offsetWidth; // restart animation\r\n+            countText.classList.add('count-text');\r\n+            count--;\r\n+        } else if (count === 0) {\r\n+            countText.textContent = 'GO!';\r\n+            countText.classList.remove('count-text');\r\n+            void countText.offsetWidth;\r\n+            countText.classList.add('count-text');\r\n+            count--;\r\n+        } else {\r\n+            clearInterval(interval);\r\n+            countdownScreen.style.display = 'none';\r\n+            moveDrone(path);\r\n+        }\r\n+    }, 1000); // 1 second per count\r\n+}\r\n+\r\n+function moveDrone(path) {\r\n+    const drone = document.getElementById('drone-fly');\r\n+\r\n+    // Start at the first cell\r\n+    const first = path[0];\r\n+    const firstCell = document.querySelector(`.cell[data-row=\"${first[0]}\"][data-col=\"${first[1]}\"]`);\r\n+\r\n+    if (!firstCell) return;\r\n+\r\n+    // Show and position drone\r\n+    const rect = firstCell.getBoundingClientRect();\r\n+    drone.style.display = 'block';\r\n+    drone.style.position = 'absolute';\r\n+    drone.style.left = rect.left + 'px';\r\n+    drone.style.top = rect.top + 'px';\r\n+\r\n+    let step = 1;\r\n+\r\n+    const interval = setInterval(() => {\r\n+        if (step >= path.length) {\r\n+            clearInterval(interval);\r\n+            // alert(\"Delivery Complete ✅\");\r\n+            // 🔥 Launch confetti\r\n+            confetti({\r\n+                particleCount: 150,\r\n+                spread: 70,\r\n+                origin: { y: 0.6 }\r\n+            });\r\n+            setTimeout(() => {\r\n+                clearAfterDelivery();\r\n+            }, 20000);\r\n+            return;\r\n+        }\r\n+\r\n+        const [row, col] = path[step];\r\n+        const cell = document.querySelector(`.cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\r\n+        if (cell) {\r\n+            const rect = cell.getBoundingClientRect();\r\n+            drone.style.left = rect.left + 'px';\r\n+            drone.style.top = rect.top + 'px';\r\n+        }\r\n+\r\n+        step++;\r\n+    }, 1400); // Adjust to match transition speed\r\n+}\r\n+\r\n+// Resets all grid items and set to \".\" white \r\n+function resetGrid() {\r\n+    window.location.reload();\r\n+    console.log(\"Grid has been reset ✅\");\r\n+}\r\n+\r\n+// Cleaning the path after delivery \r\n+function clearAfterDelivery() {\r\n+    const cells = document.querySelectorAll('.cell');\r\n+\r\n+    cells.forEach(cell => {\r\n+        if (\r\n+            !cell.classList.contains('start') &&\r\n+            !cell.classList.contains('goal') &&\r\n+            !cell.classList.contains('block')\r\n+        ) {\r\n+            cell.className = 'cell open';\r\n+            cell.innerHTML = '';\r\n+            cell.style.backgroundColor = 'white';\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+// for theoritical explaination \r\n+function updateGridStructureView() {\r\n+    const formatted = grid.map(row =>\r\n+        '[' + row.map(cell => `'${cell}'`).join(', ') + ']'\r\n+    ).join(',\\n');\r\n+\r\n+    const finalString = '[\\n' + formatted + '\\n]';\r\n+    document.getElementById('grid-structure').textContent = finalString;\r\n+}\r\n+\r\n+// for resetting the grid colors \r\n+function resetGridColors() {\r\n+    const cells = document.querySelectorAll('.cell');\r\n+    cells.forEach(cell => {\r\n+        if (\r\n+            !cell.classList.contains('start') &&\r\n+            !cell.classList.contains('goal') &&\r\n+            !cell.classList.contains('block')\r\n+        ) {\r\n+            cell.style.backgroundColor = 'white';\r\n+        }\r\n+    });\r\n+}\r\n+\r\n+\r\n+function renderSearchTree(treeData) {\r\n+    new Treant({\r\n+        chart: {\r\n+            container: \"#tree-container\",\r\n+            connectors: {\r\n+                type: \"step\"\r\n+            },\r\n+            node: {\r\n+                HTMLclass: \"nodeExample1\"\r\n+            }\r\n+        },\r\n+        nodeStructure: treeData\r\n+    });\r\n+}\r\n+\r\n+// CSRF Token helper (Django needs this)\r\n+function getCookie(name) {\r\n+    let cookieValue = null;\r\n+    if (document.cookie && document.cookie !== '') {\r\n+        const cookies = document.cookie.split(';');\r\n+        for (let i = 0; i < cookies.length; i++) {\r\n+            const cookie = cookies[i].trim();\r\n+            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n+                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n+                break;\r\n+            }\r\n+        }\r\n+    }\r\n+    return cookieValue;\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1753558606065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -288,586 +288,4 @@\n     }\r\n     return cookieValue;\r\n }\r\n \r\n-let currentMode = '.'; // default to open\r\n-let grid = [];\r\n-\r\n-function createGrid() {\r\n-    const rows = parseInt(document.getElementById('rows').value);\r\n-    const cols = parseInt(document.getElementById('cols').value);\r\n-    const container = document.getElementById('grid-container');\r\n-\r\n-    container.innerHTML = '';\r\n-    container.style.gridTemplateColumns = `repeat(${cols}, 110px)`;\r\n-    grid = [];\r\n-\r\n-    for (let r = 0; r < rows; r++) {\r\n-        const row = [];\r\n-        for (let c = 0; c < cols; c++) {\r\n-            const div = document.createElement('div');\r\n-            div.classList.add('cell', 'open');\r\n-            div.dataset.row = r;\r\n-            div.dataset.col = c;\r\n-            div.style.height = '110px';\r\n-            div.style.width = '110px';\r\n-\r\n-            div.onclick = () => {\r\n-                toggleCell(div);\r\n-            };\r\n-\r\n-            container.appendChild(div);\r\n-            row.push('.');\r\n-        }\r\n-        grid.push(row);\r\n-    }\r\n-\r\n-    updateGridStructureView();\r\n-}\r\n-\r\n-createGrid();\r\n-\r\n-function toggleCell(cell) {\r\n-    const row = cell.dataset.row;\r\n-    const col = cell.dataset.col;\r\n-\r\n-    const states = ['.', 'X', 'S', 'G'];\r\n-    const classes = ['open', 'block', 'start', 'goal'];\r\n-\r\n-    let currentState = grid[row][col];\r\n-    let nextIndex = (states.indexOf(currentState) + 1) % states.length;\r\n-    let nextState = states[nextIndex];\r\n-\r\n-    // Reset all other S or G if needed\r\n-    if (nextState === 'S') resetOther('S');\r\n-    if (nextState === 'G') resetOther('G');\r\n-\r\n-    grid[row][col] = nextState;\r\n-    cell.className = `cell ${classes[nextIndex]}`;\r\n-    cell.textContent = nextState === '.' ? '' : nextState;\r\n-\r\n-    // Add images\r\n-    if (nextState === 'S') {\r\n-        cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n-    } else if (nextState === 'G') {\r\n-        cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n-    }\r\n-    else if (nextState === 'X') {\r\n-        cell.innerHTML = \"<img src='/static/images/house.png' width='110'>\";\r\n-    }\r\n-\r\n-\r\n-    updateGridStructureView();\r\n-}\r\n-\r\n-// resetinng others on multiple clicks turn by turn \r\n-function resetOther(type) {\r\n-    const container = document.getElementById('grid-container').children;\r\n-    for (let i = 0; i < container.length; i++) {\r\n-        const cell = container[i];\r\n-        const r = cell.dataset.row;\r\n-        const c = cell.dataset.col;\r\n-        if (grid[r][c] === type) {\r\n-            grid[r][c] = '.';\r\n-            cell.className = 'cell open';\r\n-            cell.textContent = '';\r\n-        }\r\n-    }\r\n-    // ✅ Update after clearing old S or G\r\n-    updateGridStructureView();\r\n-}\r\n-\r\n-function submitGrid() {\r\n-    const algorithm = document.getElementById('algorithm').value;\r\n-\r\n-    // Send data to backend via AJAX\r\n-    $.ajax({\r\n-        url: '/solve/',  // This URL should match your Django path\r\n-        method: 'POST',\r\n-        headers: {\r\n-            'X-CSRFToken': getCookie('csrftoken')  // Include CSRF token\r\n-        },\r\n-        data: {\r\n-            algorithm: algorithm,\r\n-            grid: JSON.stringify(grid)\r\n-        },\r\n-        success: function (response) {\r\n-            console.log(\"Path:\", response.path);\r\n-            resetGridColors();\r\n-            highlightPath(response.path); // animate on grid\r\n-            if (response.tree) {\r\n-                renderSearchTree(response.tree); // 🔥 show the tree\r\n-            }\r\n-        },\r\n-        error: function () {\r\n-            alert(\"Error sending data to backend.\");\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-\r\n-function highlightPath(path) {\r\n-    // 1. Highlight the path first (light blue cells)\r\n-    path.forEach((coord, index) => {\r\n-        const row = coord[0];\r\n-        const col = coord[1];\r\n-        const cell = document.querySelector(`.cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\r\n-\r\n-        if (cell && !cell.classList.contains('start') && !cell.classList.contains('goal')) {\r\n-            setTimeout(() => {\r\n-                cell.style.backgroundColor = '#ceffc2ff'; // light blue\r\n-            }, 200 * index);\r\n-        }\r\n-    });\r\n-\r\n-    // 2. Start animated countdown\r\n-    setTimeout(() => {\r\n-        showCountdown(path);\r\n-    }, path.length * 200 + 500); // wait until highlighting is done\r\n-}\r\n-\r\n-\r\n-function showCountdown(path) {\r\n-    const countdownScreen = document.getElementById('countdown-screen');\r\n-    const countText = document.getElementById('count-text');\r\n-\r\n-    countdownScreen.style.display = 'flex';\r\n-\r\n-    let count = 3;\r\n-\r\n-    const interval = setInterval(() => {\r\n-        if (count > 0) {\r\n-            countText.textContent = count;\r\n-            countText.classList.remove('count-text');\r\n-            void countText.offsetWidth; // restart animation\r\n-            countText.classList.add('count-text');\r\n-            count--;\r\n-        } else if (count === 0) {\r\n-            countText.textContent = 'GO!';\r\n-            countText.classList.remove('count-text');\r\n-            void countText.offsetWidth;\r\n-            countText.classList.add('count-text');\r\n-            count--;\r\n-        } else {\r\n-            clearInterval(interval);\r\n-            countdownScreen.style.display = 'none';\r\n-            moveDrone(path);\r\n-        }\r\n-    }, 1000); // 1 second per count\r\n-}\r\n-\r\n-function moveDrone(path) {\r\n-    const drone = document.getElementById('drone-fly');\r\n-\r\n-    // Start at the first cell\r\n-    const first = path[0];\r\n-    const firstCell = document.querySelector(`.cell[data-row=\"${first[0]}\"][data-col=\"${first[1]}\"]`);\r\n-\r\n-    if (!firstCell) return;\r\n-\r\n-    // Show and position drone\r\n-    const rect = firstCell.getBoundingClientRect();\r\n-    drone.style.display = 'block';\r\n-    drone.style.position = 'absolute';\r\n-    drone.style.left = rect.left + 'px';\r\n-    drone.style.top = rect.top + 'px';\r\n-\r\n-    let step = 1;\r\n-\r\n-    const interval = setInterval(() => {\r\n-        if (step >= path.length) {\r\n-            clearInterval(interval);\r\n-            // alert(\"Delivery Complete ✅\");\r\n-            // 🔥 Launch confetti\r\n-            confetti({\r\n-                particleCount: 150,\r\n-                spread: 70,\r\n-                origin: { y: 0.6 }\r\n-            });\r\n-            setTimeout(() => {\r\n-                clearAfterDelivery();\r\n-            }, 20000);\r\n-            return;\r\n-        }\r\n-\r\n-        const [row, col] = path[step];\r\n-        const cell = document.querySelector(`.cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\r\n-        if (cell) {\r\n-            const rect = cell.getBoundingClientRect();\r\n-            drone.style.left = rect.left + 'px';\r\n-            drone.style.top = rect.top + 'px';\r\n-        }\r\n-\r\n-        step++;\r\n-    }, 1400); // Adjust to match transition speed\r\n-}\r\n-\r\n-// Resets all grid items and set to \".\" white \r\n-function resetGrid() {\r\n-    window.location.reload();\r\n-    console.log(\"Grid has been reset ✅\");\r\n-}\r\n-\r\n-// Cleaning the path after delivery \r\n-function clearAfterDelivery() {\r\n-    const cells = document.querySelectorAll('.cell');\r\n-\r\n-    cells.forEach(cell => {\r\n-        if (\r\n-            !cell.classList.contains('start') &&\r\n-            !cell.classList.contains('goal') &&\r\n-            !cell.classList.contains('block')\r\n-        ) {\r\n-            cell.className = 'cell open';\r\n-            cell.innerHTML = '';\r\n-            cell.style.backgroundColor = 'white';\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// for theoritical explaination \r\n-function updateGridStructureView() {\r\n-    const formatted = grid.map(row =>\r\n-        '[' + row.map(cell => `'${cell}'`).join(', ') + ']'\r\n-    ).join(',\\n');\r\n-\r\n-    const finalString = '[\\n' + formatted + '\\n]';\r\n-    document.getElementById('grid-structure').textContent = finalString;\r\n-}\r\n-\r\n-// for resetting the grid colors \r\n-function resetGridColors() {\r\n-    const cells = document.querySelectorAll('.cell');\r\n-    cells.forEach(cell => {\r\n-        if (\r\n-            !cell.classList.contains('start') &&\r\n-            !cell.classList.contains('goal') &&\r\n-            !cell.classList.contains('block')\r\n-        ) {\r\n-            cell.style.backgroundColor = 'white';\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-\r\n-function renderSearchTree(treeData) {\r\n-    new Treant({\r\n-        chart: {\r\n-            container: \"#tree-container\",\r\n-            connectors: {\r\n-                type: \"step\"\r\n-            },\r\n-            node: {\r\n-                HTMLclass: \"nodeExample1\"\r\n-            }\r\n-        },\r\n-        nodeStructure: treeData\r\n-    });\r\n-}\r\n-\r\n-// CSRF Token helper (Django needs this)\r\n-function getCookie(name) {\r\n-    let cookieValue = null;\r\n-    if (document.cookie && document.cookie !== '') {\r\n-        const cookies = document.cookie.split(';');\r\n-        for (let i = 0; i < cookies.length; i++) {\r\n-            const cookie = cookies[i].trim();\r\n-            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n-                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n-                break;\r\n-            }\r\n-        }\r\n-    }\r\n-    return cookieValue;\r\n-}\r\n-\r\n-let currentMode = '.'; // default to open\r\n-let grid = [];\r\n-\r\n-function createGrid() {\r\n-    const rows = parseInt(document.getElementById('rows').value);\r\n-    const cols = parseInt(document.getElementById('cols').value);\r\n-    const container = document.getElementById('grid-container');\r\n-\r\n-    container.innerHTML = '';\r\n-    container.style.gridTemplateColumns = `repeat(${cols}, 110px)`;\r\n-    grid = [];\r\n-\r\n-    for (let r = 0; r < rows; r++) {\r\n-        const row = [];\r\n-        for (let c = 0; c < cols; c++) {\r\n-            const div = document.createElement('div');\r\n-            div.classList.add('cell', 'open');\r\n-            div.dataset.row = r;\r\n-            div.dataset.col = c;\r\n-            div.style.height = '110px';\r\n-            div.style.width = '110px';\r\n-\r\n-            div.onclick = () => {\r\n-                toggleCell(div);\r\n-            };\r\n-\r\n-            container.appendChild(div);\r\n-            row.push('.');\r\n-        }\r\n-        grid.push(row);\r\n-    }\r\n-\r\n-    updateGridStructureView();\r\n-}\r\n-\r\n-createGrid();\r\n-\r\n-function toggleCell(cell) {\r\n-    const row = cell.dataset.row;\r\n-    const col = cell.dataset.col;\r\n-\r\n-    const states = ['.', 'X', 'S', 'G'];\r\n-    const classes = ['open', 'block', 'start', 'goal'];\r\n-\r\n-    let currentState = grid[row][col];\r\n-    let nextIndex = (states.indexOf(currentState) + 1) % states.length;\r\n-    let nextState = states[nextIndex];\r\n-\r\n-    // Reset all other S or G if needed\r\n-    if (nextState === 'S') resetOther('S');\r\n-    if (nextState === 'G') resetOther('G');\r\n-\r\n-    grid[row][col] = nextState;\r\n-    cell.className = `cell ${classes[nextIndex]}`;\r\n-    cell.textContent = nextState === '.' ? '' : nextState;\r\n-\r\n-    // Add images\r\n-    if (nextState === 'S') {\r\n-        cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n-    } else if (nextState === 'G') {\r\n-        cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n-    }\r\n-    else if (nextState === 'X') {\r\n-        cell.innerHTML = \"<img src='/static/images/house.png' width='110'>\";\r\n-    }\r\n-\r\n-\r\n-    updateGridStructureView();\r\n-}\r\n-\r\n-// resetinng others on multiple clicks turn by turn \r\n-function resetOther(type) {\r\n-    const container = document.getElementById('grid-container').children;\r\n-    for (let i = 0; i < container.length; i++) {\r\n-        const cell = container[i];\r\n-        const r = cell.dataset.row;\r\n-        const c = cell.dataset.col;\r\n-        if (grid[r][c] === type) {\r\n-            grid[r][c] = '.';\r\n-            cell.className = 'cell open';\r\n-            cell.textContent = '';\r\n-        }\r\n-    }\r\n-    // ✅ Update after clearing old S or G\r\n-    updateGridStructureView();\r\n-}\r\n-\r\n-function submitGrid() {\r\n-    const algorithm = document.getElementById('algorithm').value;\r\n-\r\n-    // Send data to backend via AJAX\r\n-    $.ajax({\r\n-        url: '/solve/',  // This URL should match your Django path\r\n-        method: 'POST',\r\n-        headers: {\r\n-            'X-CSRFToken': getCookie('csrftoken')  // Include CSRF token\r\n-        },\r\n-        data: {\r\n-            algorithm: algorithm,\r\n-            grid: JSON.stringify(grid)\r\n-        },\r\n-        success: function (response) {\r\n-            console.log(\"Path:\", response.path);\r\n-            resetGridColors();\r\n-            highlightPath(response.path); // animate on grid\r\n-            if (response.tree) {\r\n-                renderSearchTree(response.tree); // 🔥 show the tree\r\n-            }\r\n-        },\r\n-        error: function () {\r\n-            alert(\"Error sending data to backend.\");\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-\r\n-function highlightPath(path) {\r\n-    // 1. Highlight the path first (light blue cells)\r\n-    path.forEach((coord, index) => {\r\n-        const row = coord[0];\r\n-        const col = coord[1];\r\n-        const cell = document.querySelector(`.cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\r\n-\r\n-        if (cell && !cell.classList.contains('start') && !cell.classList.contains('goal')) {\r\n-            setTimeout(() => {\r\n-                cell.style.backgroundColor = '#ceffc2ff'; // light blue\r\n-            }, 200 * index);\r\n-        }\r\n-    });\r\n-\r\n-    // 2. Start animated countdown\r\n-    setTimeout(() => {\r\n-        showCountdown(path);\r\n-    }, path.length * 200 + 500); // wait until highlighting is done\r\n-}\r\n-\r\n-\r\n-function showCountdown(path) {\r\n-    const countdownScreen = document.getElementById('countdown-screen');\r\n-    const countText = document.getElementById('count-text');\r\n-\r\n-    countdownScreen.style.display = 'flex';\r\n-\r\n-    let count = 3;\r\n-\r\n-    const interval = setInterval(() => {\r\n-        if (count > 0) {\r\n-            countText.textContent = count;\r\n-            countText.classList.remove('count-text');\r\n-            void countText.offsetWidth; // restart animation\r\n-            countText.classList.add('count-text');\r\n-            count--;\r\n-        } else if (count === 0) {\r\n-            countText.textContent = 'GO!';\r\n-            countText.classList.remove('count-text');\r\n-            void countText.offsetWidth;\r\n-            countText.classList.add('count-text');\r\n-            count--;\r\n-        } else {\r\n-            clearInterval(interval);\r\n-            countdownScreen.style.display = 'none';\r\n-            moveDrone(path);\r\n-        }\r\n-    }, 1000); // 1 second per count\r\n-}\r\n-\r\n-function moveDrone(path) {\r\n-    const drone = document.getElementById('drone-fly');\r\n-\r\n-    // Start at the first cell\r\n-    const first = path[0];\r\n-    const firstCell = document.querySelector(`.cell[data-row=\"${first[0]}\"][data-col=\"${first[1]}\"]`);\r\n-\r\n-    if (!firstCell) return;\r\n-\r\n-    // Show and position drone\r\n-    const rect = firstCell.getBoundingClientRect();\r\n-    drone.style.display = 'block';\r\n-    drone.style.position = 'absolute';\r\n-    drone.style.left = rect.left + 'px';\r\n-    drone.style.top = rect.top + 'px';\r\n-\r\n-    let step = 1;\r\n-\r\n-    const interval = setInterval(() => {\r\n-        if (step >= path.length) {\r\n-            clearInterval(interval);\r\n-            alert(\"Delivery Complete ✅\");\r\n-            // 🔥 Launch confetti\r\n-            confetti({\r\n-                particleCount: 150,\r\n-                spread: 70,\r\n-                origin: { y: 0.6 }\r\n-            });\r\n-            setTimeout(() => {\r\n-                clearAfterDelivery();\r\n-            }, 20000);\r\n-            return;\r\n-        }\r\n-\r\n-        const [row, col] = path[step];\r\n-        const cell = document.querySelector(`.cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\r\n-        if (cell) {\r\n-            const rect = cell.getBoundingClientRect();\r\n-            drone.style.left = rect.left + 'px';\r\n-            drone.style.top = rect.top + 'px';\r\n-        }\r\n-\r\n-        step++;\r\n-    }, 1400); // Adjust to match transition speed\r\n-}\r\n-\r\n-// Resets all grid items and set to \".\" white \r\n-function resetGrid() {\r\n-    window.location.reload();\r\n-    console.log(\"Grid has been reset ✅\");\r\n-}\r\n-\r\n-// Cleaning the path after delivery \r\n-function clearAfterDelivery() {\r\n-    const cells = document.querySelectorAll('.cell');\r\n-\r\n-    cells.forEach(cell => {\r\n-        if (\r\n-            !cell.classList.contains('start') &&\r\n-            !cell.classList.contains('goal') &&\r\n-            !cell.classList.contains('block')\r\n-        ) {\r\n-            cell.className = 'cell open';\r\n-            cell.innerHTML = '';\r\n-            cell.style.backgroundColor = 'white';\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-// for theoritical explaination \r\n-function updateGridStructureView() {\r\n-    const formatted = grid.map(row =>\r\n-        '[' + row.map(cell => `'${cell}'`).join(', ') + ']'\r\n-    ).join(',\\n');\r\n-\r\n-    const finalString = '[\\n' + formatted + '\\n]';\r\n-    document.getElementById('grid-structure').textContent = finalString;\r\n-}\r\n-\r\n-// for resetting the grid colors \r\n-function resetGridColors() {\r\n-    const cells = document.querySelectorAll('.cell');\r\n-    cells.forEach(cell => {\r\n-        if (\r\n-            !cell.classList.contains('start') &&\r\n-            !cell.classList.contains('goal') &&\r\n-            !cell.classList.contains('block')\r\n-        ) {\r\n-            cell.style.backgroundColor = 'white';\r\n-        }\r\n-    });\r\n-}\r\n-\r\n-\r\n-function renderSearchTree(treeData) {\r\n-    new Treant({\r\n-        chart: {\r\n-            container: \"#tree-container\",\r\n-            connectors: {\r\n-                type: \"step\"\r\n-            },\r\n-            node: {\r\n-                HTMLclass: \"nodeExample1\"\r\n-            }\r\n-        },\r\n-        nodeStructure: treeData\r\n-    });\r\n-}\r\n-\r\n-// CSRF Token helper (Django needs this)\r\n-function getCookie(name) {\r\n-    let cookieValue = null;\r\n-    if (document.cookie && document.cookie !== '') {\r\n-        const cookies = document.cookie.split(';');\r\n-        for (let i = 0; i < cookies.length; i++) {\r\n-            const cookie = cookies[i].trim();\r\n-            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n-                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n-                break;\r\n-            }\r\n-        }\r\n-    }\r\n-    return cookieValue;\r\n-}\r\n-\r\n"
                }
            ],
            "date": 1753552174909,
            "name": "Commit-0",
            "content": "let currentMode = '.'; // default to open\r\nlet grid = [];\r\n\r\nfunction createGrid() {\r\n    const rows = parseInt(document.getElementById('rows').value);\r\n    const cols = parseInt(document.getElementById('cols').value);\r\n    const container = document.getElementById('grid-container');\r\n\r\n    container.innerHTML = '';\r\n    container.style.gridTemplateColumns = `repeat(${cols}, 110px)`;\r\n    grid = [];\r\n\r\n    for (let r = 0; r < rows; r++) {\r\n        const row = [];\r\n        for (let c = 0; c < cols; c++) {\r\n            const div = document.createElement('div');\r\n            div.classList.add('cell', 'open');\r\n            div.dataset.row = r;\r\n            div.dataset.col = c;\r\n            div.style.height = '110px';\r\n            div.style.width = '110px';\r\n\r\n            div.onclick = () => {\r\n                toggleCell(div);\r\n            };\r\n\r\n            container.appendChild(div);\r\n            row.push('.');\r\n        }\r\n        grid.push(row);\r\n    }\r\n}\r\n\r\ncreateGrid();\r\n\r\nfunction toggleCell(cell) {\r\n    const row = cell.dataset.row;\r\n    const col = cell.dataset.col;\r\n\r\n    const states = ['.', 'X', 'S', 'G'];\r\n    const classes = ['open', 'block', 'start', 'goal'];\r\n\r\n    let currentState = grid[row][col];\r\n    let nextIndex = (states.indexOf(currentState) + 1) % states.length;\r\n    let nextState = states[nextIndex];\r\n\r\n    // Reset all other S or G if needed\r\n    if (nextState === 'S') resetOther('S');\r\n    if (nextState === 'G') resetOther('G');\r\n\r\n    grid[row][col] = nextState;\r\n    cell.className = `cell ${classes[nextIndex]}`;\r\n    cell.textContent = nextState === '.' ? '' : nextState;\r\n\r\n    // Add images\r\n    if (nextState === 'S') {\r\n        cell.innerHTML = \"<img src='/static/images/drone.gif' width='110'>\";\r\n    } else if (nextState === 'G') {\r\n        cell.innerHTML = \"<img src='/static/images/flag.gif' width='110'>\";\r\n    }\r\n}\r\n\r\n// resetinng others on multiple clicks turn by turn \r\nfunction resetOther(type) {\r\n    const container = document.getElementById('grid-container').children;\r\n    for (let i = 0; i < container.length; i++) {\r\n        const cell = container[i];\r\n        const r = cell.dataset.row;\r\n        const c = cell.dataset.col;\r\n        if (grid[r][c] === type) {\r\n            grid[r][c] = '.';\r\n            cell.className = 'cell open';\r\n            cell.textContent = '';\r\n        }\r\n    }\r\n}\r\n\r\nfunction submitGrid() {\r\n    const algorithm = document.getElementById('algorithm').value;\r\n\r\n    // Send data to backend via AJAX\r\n    $.ajax({\r\n        url: '/solve/',  // This URL should match your Django path\r\n        method: 'POST',\r\n        headers: {\r\n            'X-CSRFToken': getCookie('csrftoken')  // Include CSRF token\r\n        },\r\n        data: {\r\n            algorithm: algorithm,\r\n            grid: JSON.stringify(grid)\r\n        },\r\n        success: function (response) {\r\n            console.log(\"Path:\", response.path);\r\n            resetGridColors();\r\n            highlightPath(response.path); // animate on grid\r\n        },\r\n        error: function () {\r\n            alert(\"Error sending data to backend.\");\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction highlightPath(path) {\r\n    // 1. Highlight the path first (light blue cells)\r\n    path.forEach((coord, index) => {\r\n        const row = coord[0];\r\n        const col = coord[1];\r\n        const cell = document.querySelector(`.cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\r\n\r\n        if (cell && !cell.classList.contains('start') && !cell.classList.contains('goal')) {\r\n            setTimeout(() => {\r\n                cell.style.backgroundColor = '#ceffc2ff'; // light blue\r\n            }, 200 * index);\r\n        }\r\n    });\r\n\r\n    // 2. Start animated countdown\r\n    setTimeout(() => {\r\n        showCountdown(path);\r\n    }, path.length * 200 + 500); // wait until highlighting is done\r\n}\r\n\r\n\r\nfunction showCountdown(path) {\r\n    const countdownScreen = document.getElementById('countdown-screen');\r\n    const countText = document.getElementById('count-text');\r\n\r\n    countdownScreen.style.display = 'flex';\r\n\r\n    let count = 3;\r\n\r\n    const interval = setInterval(() => {\r\n        if (count > 0) {\r\n            countText.textContent = count;\r\n            countText.classList.remove('count-text');\r\n            void countText.offsetWidth; // restart animation\r\n            countText.classList.add('count-text');\r\n            count--;\r\n        } else if (count === 0) {\r\n            countText.textContent = 'GO!';\r\n            countText.classList.remove('count-text');\r\n            void countText.offsetWidth;\r\n            countText.classList.add('count-text');\r\n            count--;\r\n        } else {\r\n            clearInterval(interval);\r\n            countdownScreen.style.display = 'none';\r\n            moveDrone(path);\r\n        }\r\n    }, 1000); // 1 second per count\r\n}\r\n\r\nfunction moveDrone(path) {\r\n    const drone = document.getElementById('drone-fly');\r\n\r\n    // Start at the first cell\r\n    const first = path[0];\r\n    const firstCell = document.querySelector(`.cell[data-row=\"${first[0]}\"][data-col=\"${first[1]}\"]`);\r\n\r\n    if (!firstCell) return;\r\n\r\n    // Show and position drone\r\n    const rect = firstCell.getBoundingClientRect();\r\n    drone.style.display = 'block';\r\n    drone.style.position = 'absolute';\r\n    drone.style.left = rect.left + 'px';\r\n    drone.style.top = rect.top + 'px';\r\n\r\n    let step = 1;\r\n\r\n    const interval = setInterval(() => {\r\n        if (step >= path.length) {\r\n            clearInterval(interval);\r\n            alert(\"Delivery Complete ✅\");\r\n            setTimeout(() => {\r\n                clearAfterDelivery();\r\n            }, 20000);\r\n            return;\r\n        }\r\n\r\n        const [row, col] = path[step];\r\n        const cell = document.querySelector(`.cell[data-row=\"${row}\"][data-col=\"${col}\"]`);\r\n        if (cell) {\r\n            const rect = cell.getBoundingClientRect();\r\n            drone.style.left = rect.left + 'px';\r\n            drone.style.top = rect.top + 'px';\r\n        }\r\n\r\n        step++;\r\n    }, 1400); // Adjust to match transition speed\r\n}\r\n\r\n// Resets all grid items and set to \".\" white \r\nfunction resetGrid() {\r\n    window.location.reload();\r\n    console.log(\"Grid has been reset ✅\");\r\n}\r\n\r\n// Cleaning the path after delivery \r\nfunction clearAfterDelivery() {\r\n    const cells = document.querySelectorAll('.cell');\r\n\r\n    cells.forEach(cell => {\r\n        if (\r\n            !cell.classList.contains('start') &&\r\n            !cell.classList.contains('goal') &&\r\n            !cell.classList.contains('block')\r\n        ) {\r\n            cell.className = 'cell open';\r\n            cell.innerHTML = '';\r\n            cell.style.backgroundColor = 'white';\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction updateGridStructureView() {\r\n    const formatted = grid.map(row => \r\n        '[' + row.map(cell => `'${cell}'`).join(', ') + ']'\r\n    ).join(',\\n');\r\n\r\n    const finalString = '[\\n' + formatted + '\\n]';\r\n    document.getElementById('grid-structure').textContent = finalString;\r\n}\r\n\r\n// for resetting the grid colors \r\nfunction resetGridColors() {\r\n    const cells = document.querySelectorAll('.cell');\r\n    cells.forEach(cell => {\r\n        if (\r\n            !cell.classList.contains('start') &&\r\n            !cell.classList.contains('goal') &&\r\n            !cell.classList.contains('block')\r\n        ) {\r\n            cell.style.backgroundColor = 'white';\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\n// CSRF Token helper (Django needs this)\r\nfunction getCookie(name) {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        const cookies = document.cookie.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\n"
        }
    ]
}