{
    "sourceFile": "pathfinder/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1753551653067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753553989460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n         else:\r\n             return JsonResponse({'success': False, 'error': 'Unsupported algorithm'})\r\n \r\n         if path:\r\n-            return JsonResponse({'success': True, 'path': path})\r\n+            return JsonResponse({'success': True, 'path': path, })\r\n         else:\r\n             return JsonResponse({'success': False, 'error': 'No path found'})\r\n \r\n     return JsonResponse({'success': False, 'error': 'Invalid request method'})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753554003057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,16 @@\n         else:\r\n             return JsonResponse({'success': False, 'error': 'Unsupported algorithm'})\r\n \r\n         if path:\r\n-            return JsonResponse({'success': True, 'path': path, })\r\n+            return JsonResponse({\r\n+                'success': True, 'path': path, 'tree': {\r\n+        'text': {'name': 'S(0,0)'},\r\n+        'children': [\r\n+            {'text': {'name': '(1,0)'}, 'children': [{'text': {'name': '(2,0)'}}]},\r\n+            {'text': {'name': '(0,1)'}}\r\n+        ]\r\n+    }})\r\n         else:\r\n             return JsonResponse({'success': False, 'error': 'No path found'})\r\n \r\n     return JsonResponse({'success': False, 'error': 'Invalid request method'})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753554009013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,11 @@\n             return JsonResponse({'success': False, 'error': 'Unsupported algorithm'})\r\n \r\n         if path:\r\n             return JsonResponse({\r\n-                'success': True, 'path': path, 'tree': {\r\n-        'text': {'name': 'S(0,0)'},\r\n-        'children': [\r\n+            'success': True, 'path': path, 'tree': {\r\n+            'text': {'name': 'S(0,0)'},\r\n+            'children': [\r\n             {'text': {'name': '(1,0)'}, 'children': [{'text': {'name': '(2,0)'}}]},\r\n             {'text': {'name': '(0,1)'}}\r\n         ]\r\n     }})\r\n"
                },
                {
                    "date": 1753554016791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,11 +53,11 @@\n             return JsonResponse({\r\n             'success': True, 'path': path, 'tree': {\r\n             'text': {'name': 'S(0,0)'},\r\n             'children': [\r\n-            {'text': {'name': '(1,0)'}, 'children': [{'text': {'name': '(2,0)'}}]},\r\n-            {'text': {'name': '(0,1)'}}\r\n-        ]\r\n+                {'text': {'name': '(1,0)'}, 'children': [{'text': {'name': '(2,0)'}}]},\r\n+                {'text': {'name': '(0,1)'}}\r\n+           ]\r\n     }})\r\n         else:\r\n             return JsonResponse({'success': False, 'error': 'No path found'})\r\n \r\n"
                },
                {
                    "date": 1753554079618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,19 +5,18 @@\n from collections import deque\r\n from .algorithms import bfs, dfs, ucs, astar, best_first\r\n \r\n \r\n-\r\n # Create your views here.\r\n def home(request):\r\n-    return render(request, 'home.html')\r\n+    return render(request, \"home.html\")\r\n \r\n \r\n @csrf_exempt\r\n def solve_grid(request):\r\n-    if request.method == 'POST':\r\n-        grid = json.loads(request.POST.get('grid'))\r\n-        algorithm = request.POST.get('algorithm')\r\n+    if request.method == \"POST\":\r\n+        grid = json.loads(request.POST.get(\"grid\"))\r\n+        algorithm = request.POST.get(\"algorithm\")\r\n \r\n         start = None\r\n         goal = None\r\n \r\n@@ -26,39 +25,49 @@\n \r\n         # Find S and G positions\r\n         for r in range(rows):\r\n             for c in range(cols):\r\n-                if grid[r][c] == 'S':\r\n+                if grid[r][c] == \"S\":\r\n                     start = (r, c)\r\n-                elif grid[r][c] == 'G':\r\n+                elif grid[r][c] == \"G\":\r\n                     goal = (r, c)\r\n \r\n         if not start or not goal:\r\n-            return JsonResponse({'success': False, 'error': 'Start or Goal not defined'})\r\n+            return JsonResponse(\r\n+                {\"success\": False, \"error\": \"Start or Goal not defined\"}\r\n+            )\r\n \r\n         # Select and run the chosen algorithm\r\n-        if algorithm == 'bfs':\r\n+        if algorithm == \"bfs\":\r\n             path = bfs(grid, start, goal)\r\n-        elif algorithm == 'dfs':\r\n+        elif algorithm == \"dfs\":\r\n             path = dfs(grid, start, goal)\r\n-        elif algorithm == 'ucs':\r\n+        elif algorithm == \"ucs\":\r\n             path = ucs(grid, start, goal)\r\n-        elif algorithm == 'astar':\r\n+        elif algorithm == \"astar\":\r\n             path = astar(grid, start, goal)\r\n-        elif algorithm == 'bestfirst':\r\n-            path = best_first(grid, start, goal)    \r\n+        elif algorithm == \"bestfirst\":\r\n+            path = best_first(grid, start, goal)\r\n         else:\r\n-            return JsonResponse({'success': False, 'error': 'Unsupported algorithm'})\r\n+            return JsonResponse({\"success\": False, \"error\": \"Unsupported algorithm\"})\r\n \r\n         if path:\r\n\\ No newline at end of file\n-            return JsonResponse({\r\n-            'success': True, 'path': path, 'tree': {\r\n-            'text': {'name': 'S(0,0)'},\r\n-            'children': [\r\n-                {'text': {'name': '(1,0)'}, 'children': [{'text': {'name': '(2,0)'}}]},\r\n-                {'text': {'name': '(0,1)'}}\r\n-           ]\r\n-    }})\r\n+            return JsonResponse(\r\n+                {\r\n+                    \"success\": True,\r\n+                    \"path\": path,\r\n+                    \"tree\": {\r\n+                        \"text\": {\"name\": \"S(0,0)\"},\r\n+                        \"children\": [\r\n+                            {\r\n+                                \"text\": {\"name\": \"(1,0)\"},\r\n+                                \"children\": [{\"text\": {\"name\": \"(2,0)\"}}],\r\n+                            },\r\n+                            {\"text\": {\"name\": \"(0,1)\"}},\r\n+                        ],\r\n+                    },\r\n+                }\r\n+            )\r\n         else:\r\n-            return JsonResponse({'success': False, 'error': 'No path found'})\r\n+            return JsonResponse({\"success\": False, \"error\": \"No path found\"})\r\n \r\n-    return JsonResponse({'success': False, 'error': 'Invalid request method'})\n+    return JsonResponse({\"success\": False, \"error\": \"Invalid request method\"})\r\n"
                },
                {
                    "date": 1753554086743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,73 @@\n+from django.shortcuts import render\r\n+import json\r\n+from django.http import JsonResponse\r\n+from django.views.decorators.csrf import csrf_exempt\r\n+from collections import deque\r\n+from .algorithms import bfs, dfs, ucs, astar, best_first\r\n+\r\n+\r\n+# Create your views here.\r\n+def home(request):\r\n+    return render(request, \"home.html\")\r\n+\r\n+\r\n+@csrf_exempt\r\n+def solve_grid(request):\r\n+    if request.method == \"POST\":\r\n+        grid = json.loads(request.POST.get(\"grid\"))\r\n+        algorithm = request.POST.get(\"algorithm\")\r\n+\r\n+        start = None\r\n+        goal = None\r\n+\r\n+        rows = len(grid)\r\n+        cols = len(grid[0])\r\n+\r\n+        # Find S and G positions\r\n+        for r in range(rows):\r\n+            for c in range(cols):\r\n+                if grid[r][c] == \"S\":\r\n+                    start = (r, c)\r\n+                elif grid[r][c] == \"G\":\r\n+                    goal = (r, c)\r\n+\r\n+        if not start or not goal:\r\n+            return JsonResponse(\r\n+                {\"success\": False, \"error\": \"Start or Goal not defined\"}\r\n+            )\r\n+\r\n+        # Select and run the chosen algorithm\r\n+        if algorithm == \"bfs\":\r\n+            path = bfs(grid, start, goal)\r\n+        elif algorithm == \"dfs\":\r\n+            path = dfs(grid, start, goal)\r\n+        elif algorithm == \"ucs\":\r\n+            path = ucs(grid, start, goal)\r\n+        elif algorithm == \"astar\":\r\n+            path = astar(grid, start, goal)\r\n+        elif algorithm == \"bestfirst\":\r\n+            path = best_first(grid, start, goal)\r\n+        else:\r\n+            return JsonResponse({\"success\": False, \"error\": \"Unsupported algorithm\"})\r\n+\r\n+        if path:\r\n+            return JsonResponse(\r\n+                {\r\n+                    \"success\": True,\r\n+                    \"path\": path,\r\n+                    \"tree\": {\r\n+                        \"text\": {\"name\": \"S(0,0)\"},\r\n+                        \"children\": [\r\n+                            {\r\n+                                \"text\": {\"name\": \"(1,0)\"},\r\n+                                \"children\": [{\"text\": {\"name\": \"(2,0)\"}}],\r\n+                            },\r\n+                            {\"text\": {\"name\": \"(0,1)\"}},\r\n+                        ],\r\n+                    },\r\n+                }\r\n+            )\r\n+        else:\r\n+            return JsonResponse({\"success\": False, \"error\": \"No path found\"})\r\n+\r\n+    return JsonResponse({\"success\": False, \"error\": \"Invalid request method\"})\r\n"
                },
                {
                    "date": 1753554897620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,77 +70,4 @@\n         else:\r\n             return JsonResponse({\"success\": False, \"error\": \"No path found\"})\r\n \r\n     return JsonResponse({\"success\": False, \"error\": \"Invalid request method\"})\r\n-from django.shortcuts import render\r\n-import json\r\n-from django.http import JsonResponse\r\n-from django.views.decorators.csrf import csrf_exempt\r\n-from collections import deque\r\n-from .algorithms import bfs, dfs, ucs, astar, best_first\r\n-\r\n-\r\n-# Create your views here.\r\n-def home(request):\r\n-    return render(request, \"home.html\")\r\n-\r\n-\r\n-@csrf_exempt\r\n-def solve_grid(request):\r\n-    if request.method == \"POST\":\r\n-        grid = json.loads(request.POST.get(\"grid\"))\r\n-        algorithm = request.POST.get(\"algorithm\")\r\n-\r\n-        start = None\r\n-        goal = None\r\n-\r\n-        rows = len(grid)\r\n-        cols = len(grid[0])\r\n-\r\n-        # Find S and G positions\r\n-        for r in range(rows):\r\n-            for c in range(cols):\r\n-                if grid[r][c] == \"S\":\r\n-                    start = (r, c)\r\n-                elif grid[r][c] == \"G\":\r\n-                    goal = (r, c)\r\n-\r\n-        if not start or not goal:\r\n-            return JsonResponse(\r\n-                {\"success\": False, \"error\": \"Start or Goal not defined\"}\r\n-            )\r\n-\r\n-        # Select and run the chosen algorithm\r\n-        if algorithm == \"bfs\":\r\n-            path = bfs(grid, start, goal)\r\n-        elif algorithm == \"dfs\":\r\n-            path = dfs(grid, start, goal)\r\n-        elif algorithm == \"ucs\":\r\n-            path = ucs(grid, start, goal)\r\n-        elif algorithm == \"astar\":\r\n-            path = astar(grid, start, goal)\r\n-        elif algorithm == \"bestfirst\":\r\n-            path = best_first(grid, start, goal)\r\n-        else:\r\n-            return JsonResponse({\"success\": False, \"error\": \"Unsupported algorithm\"})\r\n-\r\n-        if path:\r\n-            return JsonResponse(\r\n-                {\r\n-                    \"success\": True,\r\n-                    \"path\": path,\r\n-                    \"tree\": {\r\n-                        \"text\": {\"name\": \"S(0,0)\"},\r\n-                        \"children\": [\r\n-                            {\r\n-                                \"text\": {\"name\": \"(1,0)\"},\r\n-                                \"children\": [{\"text\": {\"name\": \"(2,0)\"}}],\r\n-                            },\r\n-                            {\"text\": {\"name\": \"(0,1)\"}},\r\n-                        ],\r\n-                    },\r\n-                }\r\n-            )\r\n-        else:\r\n-            return JsonResponse({\"success\": False, \"error\": \"No path found\"})\r\n-\r\n-    return JsonResponse({\"success\": False, \"error\": \"Invalid request method\"})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753554903815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,17 +37,17 @@\n             )\r\n \r\n         # Select and run the chosen algorithm\r\n         if algorithm == \"bfs\":\r\n-            path = bfs(grid, start, goal)\r\n+            path,  = bfs(grid, start, goal)\r\n         elif algorithm == \"dfs\":\r\n-            path = dfs(grid, start, goal)\r\n+            ,  = dfs(grid, start, goal)\r\n         elif algorithm == \"ucs\":\r\n-            path = ucs(grid, start, goal)\r\n+            path,  = ucs(grid, start, goal)\r\n         elif algorithm == \"astar\":\r\n-            path = astar(grid, start, goal)\r\n+            path,  = astar(grid, start, goal)\r\n         elif algorithm == \"bestfirst\":\r\n-            path = best_first(grid, start, goal)\r\n+            path,  = best_first(grid, start, goal)\r\n         else:\r\n             return JsonResponse({\"success\": False, \"error\": \"Unsupported algorithm\"})\r\n \r\n         if path:\r\n"
                },
                {
                    "date": 1753554920500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,17 +37,17 @@\n             )\r\n \r\n         # Select and run the chosen algorithm\r\n         if algorithm == \"bfs\":\r\n-            path,  = bfs(grid, start, goal)\r\n+            path, = bfs(grid, start, goal)\r\n         elif algorithm == \"dfs\":\r\n-            ,  = dfs(grid, start, goal)\r\n+            path, = dfs(grid, start, goal)\r\n         elif algorithm == \"ucs\":\r\n-            path,  = ucs(grid, start, goal)\r\n+            path, = ucs(grid, start, goal)\r\n         elif algorithm == \"astar\":\r\n-            path,  = astar(grid, start, goal)\r\n+            path, = astar(grid, start, goal)\r\n         elif algorithm == \"bestfirst\":\r\n-            path,  = best_first(grid, start, goal)\r\n+            path, = best_first(grid, start, goal)\r\n         else:\r\n             return JsonResponse({\"success\": False, \"error\": \"Unsupported algorithm\"})\r\n \r\n         if path:\r\n"
                },
                {
                    "date": 1753554941949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,35 +37,26 @@\n             )\r\n \r\n         # Select and run the chosen algorithm\r\n         if algorithm == \"bfs\":\r\n-            path, = bfs(grid, start, goal)\r\n+            path, tree = bfs(grid, start, goal)\r\n         elif algorithm == \"dfs\":\r\n-            path, = dfs(grid, start, goal)\r\n+            path, tree = dfs(grid, start, goal)\r\n         elif algorithm == \"ucs\":\r\n-            path, = ucs(grid, start, goal)\r\n+            path, tree = ucs(grid, start, goal)\r\n         elif algorithm == \"astar\":\r\n-            path, = astar(grid, start, goal)\r\n+            path, tree = astar(grid, start, goal)\r\n         elif algorithm == \"bestfirst\":\r\n-            path, = best_first(grid, start, goal)\r\n+            path, tree = best_first(grid, start, goal)\r\n         else:\r\n             return JsonResponse({\"success\": False, \"error\": \"Unsupported algorithm\"})\r\n \r\n         if path:\r\n             return JsonResponse(\r\n                 {\r\n                     \"success\": True,\r\n                     \"path\": path,\r\n-                    \"tree\": {\r\n-                        \"text\": {\"name\": \"S(0,0)\"},\r\n-                        \"children\": [\r\n-                            {\r\n-                                \"text\": {\"name\": \"(1,0)\"},\r\n-                                \"children\": [{\"text\": {\"name\": \"(2,0)\"}}],\r\n-                            },\r\n-                            {\"text\": {\"name\": \"(0,1)\"}},\r\n-                        ],\r\n-                    },\r\n+                    \r\n                 }\r\n             )\r\n         else:\r\n             return JsonResponse({\"success\": False, \"error\": \"No path found\"})\r\n"
                },
                {
                    "date": 1753554947888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n             return JsonResponse(\r\n                 {\r\n                     \"success\": True,\r\n                     \"path\": path,\r\n-                    \r\n+                    \"tree\"\r\n                 }\r\n             )\r\n         else:\r\n             return JsonResponse({\"success\": False, \"error\": \"No path found\"})\r\n"
                },
                {
                    "date": 1753554953064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n             return JsonResponse(\r\n                 {\r\n                     \"success\": True,\r\n                     \"path\": path,\r\n-                    \"tree\"\r\n+                    \"tree\":tree\r\n                 }\r\n             )\r\n         else:\r\n             return JsonResponse({\"success\": False, \"error\": \"No path found\"})\r\n"
                }
            ],
            "date": 1753551653067,
            "name": "Commit-0",
            "content": "from django.shortcuts import render\r\nimport json\r\nfrom django.http import JsonResponse\r\nfrom django.views.decorators.csrf import csrf_exempt\r\nfrom collections import deque\r\nfrom .algorithms import bfs, dfs, ucs, astar, best_first\r\n\r\n\r\n\r\n# Create your views here.\r\ndef home(request):\r\n    return render(request, 'home.html')\r\n\r\n\r\n@csrf_exempt\r\ndef solve_grid(request):\r\n    if request.method == 'POST':\r\n        grid = json.loads(request.POST.get('grid'))\r\n        algorithm = request.POST.get('algorithm')\r\n\r\n        start = None\r\n        goal = None\r\n\r\n        rows = len(grid)\r\n        cols = len(grid[0])\r\n\r\n        # Find S and G positions\r\n        for r in range(rows):\r\n            for c in range(cols):\r\n                if grid[r][c] == 'S':\r\n                    start = (r, c)\r\n                elif grid[r][c] == 'G':\r\n                    goal = (r, c)\r\n\r\n        if not start or not goal:\r\n            return JsonResponse({'success': False, 'error': 'Start or Goal not defined'})\r\n\r\n        # Select and run the chosen algorithm\r\n        if algorithm == 'bfs':\r\n            path = bfs(grid, start, goal)\r\n        elif algorithm == 'dfs':\r\n            path = dfs(grid, start, goal)\r\n        elif algorithm == 'ucs':\r\n            path = ucs(grid, start, goal)\r\n        elif algorithm == 'astar':\r\n            path = astar(grid, start, goal)\r\n        elif algorithm == 'bestfirst':\r\n            path = best_first(grid, start, goal)    \r\n        else:\r\n            return JsonResponse({'success': False, 'error': 'Unsupported algorithm'})\r\n\r\n        if path:\r\n            return JsonResponse({'success': True, 'path': path})\r\n        else:\r\n            return JsonResponse({'success': False, 'error': 'No path found'})\r\n\r\n    return JsonResponse({'success': False, 'error': 'Invalid request method'})"
        }
    ]
}